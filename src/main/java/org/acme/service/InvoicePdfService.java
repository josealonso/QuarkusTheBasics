package org.acme.service;

import com.lowagie.text.*;
import com.lowagie.text.pdf.*;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.acme.controller.InvoiceDTO;
import org.acme.model.User;

import java.io.ByteArrayOutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.awt.Color;

@ApplicationScoped
public class InvoicePdfService {

    @Inject
    InvoiceService invoiceService;

    private static final Font TITLE_FONT = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18);
    private static final Font HEADER_FONT = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12);
    private static final Font NORMAL_FONT = FontFactory.getFont(FontFactory.HELVETICA, 12);
    private static final Color HEADER_COLOR = new Color(220, 220, 220);

    public byte[] generateInvoicePdf(InvoiceDTO invoice, User sessionUser) throws DocumentException {
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
            Document document = new Document(PageSize.A4);
            PdfWriter.getInstance(document, baos);
            document.open();

            addTitle(document, sessionUser);
            addInvoiceDetails(document, invoice);
            addTimestamp(document);
            addEmailAddress(document, sessionUser);
//            addCustomerInformation(document, invoice);
//            addAmountDetails(document, invoice);

            document.close();
            return baos.toByteArray();
        } catch (Exception e) {
            throw new DocumentException("Failed to generate PDF: " + e.getMessage());
        }
    }


    private void addTitle(Document document, User sessionUser) throws DocumentException {
        Paragraph header = new Paragraph("INVOICE for " + sessionUser.getUsername() + "\n", TITLE_FONT);
        header.setAlignment(Element.ALIGN_CENTER);
        
        Chunk companyName = new Chunk("\n\n\n", TITLE_FONT);
       // Chunk address = new Chunk(
       //     "123 Business Street\n" +
       //     "Business City, BC 12345\n" +
       //     "Phone: (555) 555-5555\n\n",
       //     NORMAL_FONT
       // );
        
        header.add(companyName);
        //header.add(address);
        document.add(header);

    }

    private void addInvoiceDetails(Document document, InvoiceDTO invoice) throws DocumentException {
        PdfPTable table = new PdfPTable(2);
        table.setWidthPercentage(100);
        table.setSpacingBefore(10f);
        table.setSpacingAfter(10f);

        addTableCell(table, "Invoice Number:", invoice.getInvoiceNumber(), true);
        addTableCell(table, "Customer Name:", invoice.getInvoiceCustomerName(), true);
        addTableCell(table, "Date:", 
            invoice.getInvoiceDate().formatted(DateTimeFormatter.ofPattern("dd/MM/yyyy")), true);
        addTableCell(table, "Amount:", invoice.getInvoiceAmount(), true);

        document.add(table);
    }

    private void addTimestamp(Document document) throws DocumentException {
        Paragraph timestamp = new Paragraph("Issued Date: " + generateTimestamp(), NORMAL_FONT);
        timestamp.setAlignment(Element.ALIGN_RIGHT);
        document.add(timestamp);
    }

    private void addEmailAddress(Document document, User sessionUser) throws DocumentException {
        // companyInfo.setSpacingAfter(20f);
        Paragraph sentTo = new Paragraph("Generated by: " + sessionUser.getEmail(), NORMAL_FONT);
        sentTo.setAlignment(Element.ALIGN_RIGHT);
        document.add(sentTo);
    }

    private void addCustomerInformation(Document document, InvoiceDTO invoice) throws DocumentException {
        Paragraph customerHeader = new Paragraph("Customer Information", HEADER_FONT);
        customerHeader.setSpacingBefore(20f);
        customerHeader.setSpacingAfter(10f);
        document.add(customerHeader);

        PdfPTable table = new PdfPTable(2);
        table.setWidthPercentage(100);
        table.getDefaultCell().setPadding(5);
        
        // Add header cells
        PdfPCell headerCell = new PdfPCell();
        headerCell.setBackgroundColor(HEADER_COLOR);
        headerCell.setPadding(5);
        
        headerCell.setPhrase(new Phrase("Customer Name", HEADER_FONT));
        table.addCell(headerCell);
        headerCell.setPhrase(new Phrase("Customer Email", HEADER_FONT));
        table.addCell(headerCell);
        
        // Add data cells
        table.addCell(new Phrase(invoice.getInvoiceCustomerName(), NORMAL_FONT));
        table.addCell(new Phrase(invoice.getInvoiceCustomerName(), NORMAL_FONT)); // Using email as customer name for now
        
        document.add(table);
    }

    private void addAmountDetails(Document document, InvoiceDTO invoice) throws DocumentException {
        Paragraph amountHeader = new Paragraph("Amount Details", HEADER_FONT);
        amountHeader.setSpacingBefore(20f);
        amountHeader.setSpacingAfter(10f);
        document.add(amountHeader);

        PdfPTable table = new PdfPTable(2);
        table.setWidthPercentage(100);
        table.getDefaultCell().setPadding(5);
        
        // Add header cells
        PdfPCell headerCell = new PdfPCell();
        headerCell.setBackgroundColor(HEADER_COLOR);
        headerCell.setPadding(5);
        
        headerCell.setPhrase(new Phrase("Description", HEADER_FONT));
        table.addCell(headerCell);
        headerCell.setPhrase(new Phrase("Amount", HEADER_FONT));
        table.addCell(headerCell);
        
        // Add data cells
        table.addCell(new Phrase("Invoice Amount", NORMAL_FONT));
        table.addCell(new Phrase(String.format("â‚¬%.2f", invoice.getInvoiceAmount()), NORMAL_FONT));
        
        document.add(table);
    }

    private void addTableCell(PdfPTable table, String label, String value, boolean noBorder) {
        PdfPCell labelCell = new PdfPCell(new Phrase(label, HEADER_FONT));
        PdfPCell valueCell = new PdfPCell(new Phrase(value, NORMAL_FONT));
        
        if (noBorder) {
            labelCell.setBorder(Rectangle.NO_BORDER);
            valueCell.setBorder(Rectangle.NO_BORDER);
        }
        
        table.addCell(labelCell);
        table.addCell(valueCell);
    }

    private String generateTimestamp() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        String timestamp = now.format(formatter);
        return timestamp;
    }

}
